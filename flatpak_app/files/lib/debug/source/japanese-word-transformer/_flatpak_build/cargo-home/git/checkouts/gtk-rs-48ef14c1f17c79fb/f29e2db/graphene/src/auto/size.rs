// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;

glib::wrapper! {
    #[derive(Debug, PartialOrd, Ord, Hash)]
    pub struct Size(Boxed<ffi::graphene_size_t>);

    match fn {
        copy => |ptr| glib::gobject_ffi::g_boxed_copy(ffi::graphene_size_get_type(), ptr as *mut _) as *mut ffi::graphene_size_t,
        free => |ptr| glib::gobject_ffi::g_boxed_free(ffi::graphene_size_get_type(), ptr as *mut _),
        init => |_ptr| (),
        clear => |_ptr| (),
        type_ => || ffi::graphene_size_get_type(),
    }
}

impl Size {
    #[doc(alias = "graphene_size_equal")]
    fn equal(&self, b: &Size) -> bool {
        unsafe {
            from_glib(ffi::graphene_size_equal(
                self.to_glib_none().0,
                b.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "graphene_size_init")]
    pub fn init(&mut self, width: f32, height: f32) {
        unsafe {
            ffi::graphene_size_init(self.to_glib_none_mut().0, width, height);
        }
    }

    #[doc(alias = "graphene_size_init_from_size")]
    pub fn init_from_size(&mut self, src: &Size) {
        unsafe {
            ffi::graphene_size_init_from_size(self.to_glib_none_mut().0, src.to_glib_none().0);
        }
    }

    #[doc(alias = "graphene_size_interpolate")]
    pub fn interpolate(&self, b: &Size, factor: f64) -> Size {
        unsafe {
            let mut res = Size::uninitialized();
            ffi::graphene_size_interpolate(
                self.to_glib_none().0,
                b.to_glib_none().0,
                factor,
                res.to_glib_none_mut().0,
            );
            res
        }
    }

    #[doc(alias = "graphene_size_scale")]
    pub fn scale(&self, factor: f32) -> Size {
        unsafe {
            let mut res = Size::uninitialized();
            ffi::graphene_size_scale(self.to_glib_none().0, factor, res.to_glib_none_mut().0);
            res
        }
    }

    #[doc(alias = "graphene_size_zero")]
    pub fn zero() -> Size {
        assert_initialized_main_thread!();
        unsafe { from_glib_none(ffi::graphene_size_zero()) }
    }
}

impl PartialEq for Size {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        self.equal(other)
    }
}

impl Eq for Size {}
